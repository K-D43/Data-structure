# Data-structure
class Main{
    static class Node{
        int data;
        Node left;
        Node right;
        Node(int data){
            this.data=data;
            this.left=null;
            this.right=null;
        }
    }


    static class BinaryTree{
         static int idx=-1;
         public Node buildTree(int nodes[]){
             idx++;
             if(nodes[idx]==-1){
                 return null;
             }
             Node newNode=new Node(nodes[idx]);
             newNode.left=buildTree(nodes);
             newNode.right=buildTree(nodes);

             return newNode;
         }
    }
    public static void preorder(Node root){
        if (root==null){
            return;
        }
        System.out.println(root.data);
        preorder(root.left);
        preorder(root.right);
    }
    public static void inorder(Node root){
        if (root==null){
            return;
        }
        inorder(root.left);
        System.out.println(root.data);
        inorder(root.right);
    }
    public static void postorder(Node root){
        if (root==null){
            return;
        }
        postorder(root.left);
        postorder(root.right);
        System.out.println(root.data);
    }

    private static void levelOrder(Node root)
    {
        if (root==null){
            return;
        }
        Queue<Node> q=new LinkedList<>();
        q.add(root);
        q.add(null);
        while(!q.isEmpty()){
            Node currNode=q.remove();
            if (currNode==null){
                System.out.println();
                if (q.isEmpty()){
                    break;
                }
                else{
                    q.add(null);
                }
            }else{
                System.out.print(currNode.data);
                if(currNode.left!=null){
                    q.add(currNode.left);
                }
                if (currNode.right!=null){
                    q.add(currNode.right);
                }
            }
        }
    }

    public static int countOfNodes(Node root){
        if(root==null){
            return 0;
        }
        int leftCount=countOfNodes(root.left);
        int rightCount=countOfNodes(root.right);

        return leftCount+rightCount+1;
    }
    public static int sumOfNodes(Node root){
        if(root==null){
            return 0;
        }
        int leftSum=sumOfNodes(root.left);
        int rightSum=sumOfNodes(root.right);

        return leftSum+rightSum+root.data;
    }



    public static void main(String[] args) {
        int nodes[]={1,2,4,-1,-1,5,-1,-1,3,-1,6,-1,-1};
        BinaryTree t=new BinaryTree();
        Node root=t.buildTree(nodes);
//        levelOrder(root);
//        System.out.println(countOfNodes(root));
        System.out.println(sumOfNodes(root));
    }
}
